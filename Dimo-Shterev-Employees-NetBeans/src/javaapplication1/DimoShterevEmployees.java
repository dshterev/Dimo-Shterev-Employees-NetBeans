/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaapplication1;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dimosht
 */
public class DimoShterevEmployees extends javax.swing.JFrame {

    /**
     * Creates new form DimoShterevEmployees
     */
    public static final String patternYDM = "^(201[0-7]|200[0-9]|[0-1][0-9]{3})(\\/|-|\\.)(1[0-2]|0[1-9])(\\/|-|\\.)(3[01]|[0-2][1-9]|[12]0)$";
    public static final String patternDMY = "^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[13-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$";
    private List<ResultEmployeeDGO> finalList = new ArrayList<ResultEmployeeDGO>();

    public DimoShterevEmployees() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 51, 51));
        jButton1.setText("Upload file");
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File name", "Employee ID #1", "Employee ID #2", "Project ID", "Days worked"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class, java.lang.Long.class, java.lang.Long.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 51, 51));
        jButton2.setText("Delete");
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Long firstEmpId = null;
        Long secondEmpId = null;
        Long projectId = null;
        int daysTogether = 0;
        Long maxOverlap = null;

        List<EmployeeDGO> employees = new ArrayList<EmployeeDGO>();

        // open chooser and choose file
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Only text files", "txt");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            List<String> allLines;
            try {
                // read all rows in file
                allLines = Files.readAllLines(Paths.get(chooser.getSelectedFile().getAbsolutePath()));
                for (String line : allLines) {
                    // convert rows to employee data
                    employees.add(getEmployeeFromRow(line));
                }
            } catch (IOException e) {
                System.out.println("Problem with reading the file.");
                e.printStackTrace();
            }

            if (employees.size() == 0) {
                System.out.println("There are no employees in the file.");
                return;
            }

            // find the overlap
            for (int i = 0; i < employees.size() - 1; i++) {
                for (int j = i + 1; j < employees.size(); j++) {
                    EmployeeDGO e1 = employees.get(i);
                    EmployeeDGO e2 = employees.get(j);
                    if (e1.getProjectID().equals(e2.getProjectID())) {
                        Long overlap = findOverlap(e1, e2);
                        if (overlap != null) {
                            if (maxOverlap == null) {
                                maxOverlap = overlap;
                                firstEmpId = e1.getId();
                                secondEmpId = e2.getId();
                                projectId = e1.getProjectID();
                                daysTogether = getDaysFromOverlap(overlap);
                            } else {
                                if (overlap > maxOverlap) {
                                    maxOverlap = overlap;
                                    firstEmpId = e1.getId();
                                    secondEmpId = e2.getId();
                                    projectId = e1.getProjectID();
                                    daysTogether = getDaysFromOverlap(overlap);
                                }
                            }
                        }
                    }
                }
            }

            // output
            if (maxOverlap == null) {
                System.out.println("There isn't overlap.");
            } else {
                // Employee ID #1, Employee ID #2, Project ID, Days worked
                ResultEmployeeDGO res = new ResultEmployeeDGO();
                res.setFileName(chooser.getSelectedFile().getName());
                res.setFirstEmpId(firstEmpId);
                res.setSecondEmpId(secondEmpId);
                res.setProjectId(projectId);
                res.setDaysTogether(daysTogether);
                finalList.add(res);
                refreshGrid();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        finalList.remove(jTable1.getSelectedRow());
        refreshGrid();
    }//GEN-LAST:event_jButton2ActionPerformed

    public void refreshGrid() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int rowCount = model.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        Object[] rowData = new Object[5];
        for (int i = 0; i < finalList.size(); i++) {
            rowData[0] = (String)finalList.get(i).getFileName();
            rowData[1] = finalList.get(i).getFirstEmpId();
            rowData[2] = finalList.get(i).getSecondEmpId();
            rowData[3] = finalList.get(i).getProjectId();
            rowData[4] = finalList.get(i).getDaysTogether();
            model.addRow(rowData);
        }
    }

    public int getDaysFromOverlap(Long overlap) {
        return (int) (overlap / (1000 * 60 * 60 * 24));
    }

    public Long findOverlap(EmployeeDGO emp1, EmployeeDGO emp2) {
        if (emp1.getDateFrom() > emp2.getDateFrom()) {
            EmployeeDGO tmp = emp1;
            emp1 = emp2;
            emp2 = tmp;
        }
        Long start1 = emp1.getDateFrom();
        Long start2 = emp2.getDateFrom();
        Long end1 = emp1.getDateTo();
        Long end2 = emp2.getDateTo();
        Long totalRange = Math.max(end1, end2) - Math.min(start1, start2);
        Long sumOfRanges = (end1 - start1) + (end2 - start2);
        Long overlappingInterval = null;
        // only if overlap
        if (sumOfRanges > totalRange) {
            overlappingInterval = Math.min(end1, end2) - Math.max(start1, start2);
        }

        return overlappingInterval;
    }

    public EmployeeDGO getEmployeeFromRow(String row) {
        String[] arr = row.split(",");
        EmployeeDGO res = new EmployeeDGO();
        res.setId(Long.parseLong(arr[0].trim()));
        res.setProjectID(Long.parseLong(arr[1].trim()));
        res.setDateFrom(getDateFromAnyStringFormat(arr[2].trim()));
        res.setDateTo(getDateFromAnyStringFormat(arr[3].trim()));
        return res;
    }

    public Long getDateFromAnyStringFormat(String dateStr) {
        if ("null".equals(dateStr.trim().toLowerCase())) {
            return System.currentTimeMillis();
        }
        Long res = null;
        Pattern myPatternDMY = Pattern.compile(patternDMY);
        Matcher matcherDMY = myPatternDMY.matcher(dateStr);
        Pattern myPatternYMD = Pattern.compile(patternYDM);
        Matcher matcherYMD = myPatternYMD.matcher(dateStr);
        try {
            if (matcherDMY.matches()) {
                String format = getSimpleFormat(dateStr, true);
                SimpleDateFormat sdf = new SimpleDateFormat(format);
                Date date = sdf.parse(dateStr);
                res = date.getTime();

            } else if (matcherYMD.matches()) {
                String format = getSimpleFormat(dateStr, false);
                SimpleDateFormat sdf = new SimpleDateFormat(format);
                Date date = sdf.parse(dateStr);
                res = date.getTime();

            } else {
                throw new Exception("Invalid date");
            }
        } catch (ParseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return res;
    }

    public String getSimpleFormat(String text, boolean isDMY) {
        String year = "yyyy";
        if (text.length() == 8) {
            year = "yy";
        }
        String month = "MM";
        String day = "dd";
        String res = "";
        Pattern pattern = Pattern.compile("(\\D)");
        Matcher matcher = pattern.matcher(text);
        String splitter = "";
        if (matcher.find()) {
            for (int i = 0; i < matcher.groupCount(); i++) {
                String tmp = matcher.group(i) + "";
                if (tmp.length() == 1) {
                    splitter = tmp;
                }
            }
        }
        String[] arr = text.split(splitter);
        if (isDMY) {
            res = day + splitter + month + splitter + year;
        } else {
            res = year + splitter + month + splitter + day;
        }

        return res;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DimoShterevEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DimoShterevEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DimoShterevEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DimoShterevEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DimoShterevEmployees().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
